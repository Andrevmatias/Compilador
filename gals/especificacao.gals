#Options
GenerateScanner = true
GenerateParser = true
Language = Java
ScannerName = Lexico
ParserName = Sintatico
SemanticName = Semantico
Package = br.edu.ufsc.compilador.analisadores
ScannerCaseSensitive = true
ScannerTable = Compact
Input = Stream
Parser = LL
#RegularDefinitions
L: [a-zA-Z]
D: [0-9]
E: [@#_]
EXP: (E|e)(\+|\-)?{D}{D}+
CC:[\ \t\n\r]
BAR: /
COMMENT : "/*" ([^"*"]|"*"[^/])* "*/"
#Tokens
id: ({L}|@({L}|{D}))({E}({L}|{D})|{L}|{D})*

: {CC}*
: {BAR}{BAR}.*(\n)?
:! {COMMENT}

num_int: {D}+{EXP}?
num_real: (({D}+\.{D}*)|\.{D}+){EXP}?
literal: '([^']|''|\n)*'

var = id : "var"
caracter = id : "caracter"
cadeia = id : "cadeia"
inteiro = id : "inteiro"
booleano = id : "booleano"
se = id : "se"
entao = id : "entao"
senao = id : "senao"
leia = id : "leia"
escreva = id : "escreva"
ou = id : "ou"
e = id : "e"
nao = id : "nao"
falso = id : "falso"
verdadeiro = id : "verdadeiro"
de = id : "de"
faca = id : "faca"
real = id : "real"
vetor = id : "vetor"
enquanto = id : "enquanto"
programa = id : "programa"
const = id : "const"
metodo = id : "metodo"
ref = id : "ref"
val = id : "val"
registro = id : "registro"
retorne = id : "retorne"
div = id : "div"

";"
","
"."
">"
"<"
"="
"("
")"
"["
"]"
"+"
"-"
"*"
"/"
":"
":="
".."
"<>"
"<="
">="
"{"
"}"
#NonTerminals
<programa>
<bloco>
<dcl_const>
<dcl_var>
<dcl_metodos>
<dcl_metodo>
<par_formais>
<rep_par>
<tipo_metodo>
<lid>
<rep_lid>
<mp_par>
<tipo>
<constante>
<tipo_pre_definido>
<lista_com>
<rep_lista_com>
<comando>
<senaoparte>
<rcomid>
<rep_expr>
<expressao>
<resto_expressao>
<oprel>
<expsimp>
<rep_expsimp>
<op_add>
<termo>
<rep_termo>
<op_mult>
<fator>
<var>
<rvar>
<constante_explicita>
#Grammar
<programa> ::= programa id #101 ";"  <bloco> "." ;

<bloco> ::= <dcl_const>  <dcl_var> <dcl_metodos>  "{"  <lista_com>  "}" ;
 
<dcl_const> ::= const id #102 "=" <constante> #103 ";"  <dcl_const> | î ;

<dcl_var> ::= var #104 <lid>   ":"  <tipo> #105 ";"   <dcl_var> | î ;
 
<dcl_metodos> ::= <dcl_metodo>  ";"  <dcl_metodos>  |  î ;

<dcl_metodo> ::= metodo id #106 <par_formais> #107 <tipo_metodo> #108 ";"   <bloco> #109 ;                 

<par_formais> ::= "(" <mp_par> #110 <lid>  ":" <tipo_pre_definido> #111 <rep_par> ")" | î ;                      

<rep_par> ::= ";" <mp_par> #110 <lid>  ":"  <tipo_pre_definido> #111 <rep_par>  |  î ;

<tipo_metodo> ::=   ":"  <tipo_pre_definido> #112 |  î #113 ;

<lid> ::=  id #114 <rep_lid> ;

<rep_lid> ::=  ","  <lid>  |  î  ;

<mp_par>  ::= ref #115 |  val #116 ;

<tipo> ::=   <tipo_pre_definido> 
             |  cadeia "[" <constante> #121 "]"  
             |  vetor  "[" <constante> #122 ".."  <constante> #123 "]" de <tipo_pre_definido> #124
             |  registro "{" #125 <dcl_var> #126 "}" ;

<constante> ::= id #127 |  <constante_explicita> ;
	     
<tipo_pre_definido> ::=  inteiro #117 | real #118 | booleano #119 | caracter #120 ;

<lista_com>   ::=  <comando>  <rep_lista_com> ;

<rep_lista_com> ::=  ";"  <comando>  <rep_lista_com>  |  î ;

<comando> ::= id #128 <rcomid>
             |  "{"  <lista_com>  "}"
             |  se <expressao> #129 entao <comando> <senaoparte> 
             |  enquanto <expressao> #129 faca <comando>                               
             |  leia "(" #130 <var> ")"                                    
             |  escreva "(" <expressao> #131 <rep_expr> ")"  
	    |  retorne <expressao> #132
	    |  î ;

<senaoparte> ::= senao  <comando>  | î ;

<rcomid> ::= #133 ":=" <expressao> #134
               |   "["#135 <expressao> #136 "]" ":=" <expressao> #134
               |   "("#137 <expressao> #138 <rep_expr> ")" #139
	      |   #140 "." id #141 ":=" <expressao> #134
               |   î #142;

<rep_expr>  ::= "," <expressao> #143 <rep_expr> | î ;

<expressao>  ::= <expsimp> #144 <resto_expressao> ;

<resto_expressao> ::= <oprel> <expsimp> #145 | î ;

<oprel> ::= "=" #146 | "<" #147 | ">" #148 | ">=" #149 | "<=" #150 | "<>" #151 ;

<expsimp> ::= <termo> #152 <rep_expsimp> ;

<rep_expsimp> ::= <op_add> #153 <termo> #154 <rep_expsimp> | î ;
                      
<op_add> ::= "+" #155 | "-" #156 | ou #157 ;

<termo> ::= <fator> #158 <rep_termo> ;

<rep_termo> ::= <op_mult> #159 <fator> #160 <rep_termo> | î ;

<op_mult> ::= "*" #161 | "/" #162 | e #163 | div #164 ;

<fator> ::= nao <fator> #165
              | "-"  <fator> #166
     	     |  "("  <expressao> ")" #167
	     |  <var> #168
	     |  <constante_explicita> #169 ;

<var>   ::= id #128 <rvar>;

<rvar> ::= "(" #170 <expressao> #138 <rep_expr> ")" #171
              |  "[" #135 <expressao> #172 "]"
	     |  #140 "."  id #173
              |   î #174 ;
  
<constante_explicita>::=   num_int #175 |  num_real #176 |  falso #177 |  verdadeiro #178 |  literal #179;
