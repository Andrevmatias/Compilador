#Options
GenerateScanner = true
GenerateParser = true
Language = Java
ScannerName = Lexico
ParserName = Sintatico
SemanticName = Semantico
Package = br.edu.ufsc.compilador.analisadores
ScannerCaseSensitive = true
ScannerTable = Compact
Input = Stream
Parser = SLR
#RegularDefinitions
L: [a-zA-Z]
D: [0-9]
E: [@#_]
EXP: (\+|\-)?(E|e){D}{D}+
CC:[\ \t\n\r]
#Tokens
id: ({L}|@)({E}{L}|{E}{D}|{L}|{D})*

: {CC}*

c_inteiro: {D}*{EXP}?
c_real: {D}*\.{D}*{EXP}?
c_cadeia: '({D}|{L}|{E}|{CC}|'')*'

var = id : "var"
caracter = id : "caracter"
cadeia = id : "cadeia"
funcao = id : "funcao"
inicio = id : "inicio"
fim = id : "fim"
inteiro = id : "inteiro"
booleano = id : "booleano"
se = id : "se"
entao = id : "entao"
senao = id : "senao"
leia = id : "leia"
escreva = id : "escreva"
ou = id : "ou"
e = id : "e"
nao = id : "nao"
falso = id : "falso"
verdadeiro = id : "verdadeiro"
de = id : "de"
faca = id : "faca"
real = id : "real"
vetor = id : "vetor"
enquanto = id : "enquanto"
#NonTerminals
<program>
<bloco>
#Grammar
<program> ::= <bloco>;

<bloco> ::= id | c_inteiro | c_real | c_cadeia | var | caracter | cadeia | funcao | inicio | fim | inteiro | booleano | se |
	    entao | senao | leia | escreva | ou | e | nao | falso | verdadeiro | de | faca | real | vetor | enquanto;
