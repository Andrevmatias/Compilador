programa nomePrograma;

const ctInt = 3;
const ctReal = 3.5;
//const ctLit = 'teste'; //Constante de tipo nao pre-definido
const ctTrue = verdadeiro;
const ctFalso = falso;
const ctChar = 'a';

var var1Int,var2Int: inteiro;
var varReal: real;
var varChar: caracter;
var varBool: booleano;

//var nomePrograma: real; //id de programa nao pode ser usado
//var varReal: inteiro; //id duplicado no nivel

var varCaractere: caracter;
var varCadeia: cadeia[2];
var varCadeiaCt: cadeia[ctInt];

//var varCadeiaCtLim: cadeia[256]; //Cadeia maior que permitido

var varVetor: vetor[1 .. 10] de caracter;
var varVetorCt: vetor[ctInt .. 10] de inteiro;
var varVetorReal: vetor[4 .. 9] de real;
var varVetorIndiceChar: vetor['a' .. 'c'] de real;
var varVetorIndiceChar2: vetor[ctChar .. 'c'] de real;

//var varVetorInv: vetor[4 .. 1] de real; // sup< inf
//var varVetorInvChar: vetor['c' .. 'a'] de real; // sup< inf
//var varVetorTip: vetor[3.5 .. 4.6] de real; // tipo indice nao suportado
//var varVetorTipDif: vetor['a' .. 5] de real; // tipos diferentes

var varRegistro: registro 
	{
	    var campoInt: inteiro;
	    var campoReal1, campoReal2: real;
	    var campo: caracter;
	    //var campoErr: cadeia[10]; //registro so aceita tipos pre definidos
	};
var varRegistro2: registro 
	{
	    var campoDoOutro: real;
	};

metodo metodo1(ref var1Int: real; val b, c:real);
//var var1Int: inteiro; //id duplicado nivel 1
//var nomePrograma: cadeia[10]; //id programa nivel 1
{
    //varRegistro.campo := 5; //Tipo incompativel
    varRegistro.campoReal1 := 5;
    //varRegistro.campoNaoExiste := 5; //Campo nao definido
    //varRegistro.campoDoOutro := 5; //Campo de outro registro
    //ctTrue := falso; //Atribuicao de constante
    varReal := 3;
    var1Int := 3.5;
    //varReal[10] := 3; //Indexando nao vetor
    //varTesteNao := 5; //Identificador nao definido
    //varVetor.a := 5; //Nao registro qualificado
};
metodo metodoSemParametroComTipo : inteiro;{ retorne 3; };
metodo metodoSemParametroSemTipo;
{ 
    //b := 5; //Uso de id-parametro de outro método
};

metodo metodoComTipo(ref var1Int: real; val b, c:real) : inteiro;
metodo metodo1(ref var1Int: real; val b, c:real);
metodo metodoComTipo(ref var1Int: real; val b, c:real) : real;
metodo metodo1(ref var1Int: real; val b, c:real);
metodo metodoComTipo2(ref var1Int: real; val b, c:real): inteiro;
{
    metodo1(var1Int, 3, 4);
    retorne 5 div 3;  //Comentar para "Metodo com tipo deve possuir retorno"
};
{
    //retorne 3; //retorne em metodo sem tipo
};
{
    retorne 3 + 4 / 5;
};
{
    //retorne 3; //retorne em metodo sem tipo
};
{
    //retorne 'abc'; //Tipo diferente do metodo
    retorne 3;
};

{
    varCaractere := 'a';
    //varCaractere := 1; 
    //varChar := varCadeia; 
    //var1Int := 5.3; //Tipos incompativeis
    varReal := 1;
    varCadeia := ctChar;
    varCadeia := 'b';
    varCadeia := 'ajkshdjka';

    var1Int := metodoSemParametroComTipo;
    //var1Int := metodoSemParametroSemTipo; //Uso de metodo sem tipo em expressao

    //ctInt := 3; //Atribuicao a constante

    varVetorIndiceChar['a'] := 3;
    varChar := varRegistro.campo;
    //varVetorIndiceChar[1] := 3; /Indice invalido
    //leia(ctChar);//Leitura de constante
    //varVetorIndiceChar := 5;
    //varVetorIndiceChar['a'] := varVetorIndiceChar; //Vetor nao indexado
    //varRegistro := 5;
    //varRegistro.campo := varRegistro; //Registro nao qualifcado
    //campo := 'a'; 
    //varChar := campo; //Campo nao qualificado
    varChar := varCadeia[2];
    varCadeia[2] := 'a';
    varCadeia := 'assss';
    //varChar := varCadeia[2.5];//Indice de cadeia nao inteiro

   se verdadeiro entao varChar := '5';
   se falso entao se 5 > 6.5 entao se 1 entao se 5.5 > 6 entao
       se 'aa' = 'aa' entao  se varVetorCt[1] = 1 entao se 'a' = 'aa' entao 
       se (3 + 5 + 56) = 10 * (5 div 3) / 10 entao
       varCadeia := 'teste';

   se 'a' = 'a' entao {};
   //se 'aa' = 1 entao {}; //Operandos incompativeis
   //se 'a' = 1 entao {}; //Operandos incompativeis
   //se '3' entao
   //se 3.5 entao //Expressao inválida

   enquanto verdadeiro faca varChar := '5';
   enquanto falso faca enquanto 5 > 6 faca enquanto 1 faca
       varCadeia := 'teste';

    varReal := 1 / 2;
    varReal := 1 / 2.5 / 2;
    varReal := 1.5 / 2;
    //var1Int := 1 / 2;//Resultado Real
    //var1Int := 2 - 2.5; //Resultado Real
    //var1Int := 1.5 - 2; //Resultado Real
    var1Int := 1 div 2;
    //var1Int := 1 div 2.5;//Div com real
    varBool := nao varBool;
    //var1Int := nao varBool; //Resultado incompativel
    //varBool := nao var1Int; //Operando incompativel
    var1Int := -1;
    varReal := -varReal;
    //varReal := -varBool; //Operador incompativel

    varReal := varRegistro.campoReal2 + 3;
    varReal := varRegistro.campoInt div varRegistro.campoInt;
    varReal := varVetorReal[2] + 3;
    varReal :=  varVetorCt[2]  div varVetorCt[2];
    varReal := 3.5e-10;

   //enquanto '3' faca
   //enquanto 3.5 faca //Expressao invalida

    leia(varChar);
    leia(var1Int);
    leia(varCadeia);
    //leia(varBool); //Leitura de booleano

    escreva(varChar, var1Int, 'teste:');
    escreva(var1Int);
    escreva(varChar);
    //escreva(varCadeia, varBool); //Impressao de booleano

    metodo1(varRegistro.campoInt, 3, 4 * 5);
    metodo1(varVetorCt[3 + 5], 3 + 2, 4);
    metodo1(varRegistro.campoInt, 3, 4);
    //metodo1(3 + varVetorCt[3 + 5], 3, 4);
    //metodo1(var1Int * var2Int, 3, 4);
    //metodo1(var1Int + var2Int, 3, 4);
    //metodo1(ctReal, 3, 4);
    //metodo1(3, 3, 4); //Parâmetro de referencia inválido
    //metodo1(varRegistro.campoInt);//Poucos paremetros
    //metodo1(varRegistro.campoInt,3,4,5);//Muitos paremetros
    
    metodoSemParametroSemTipo;

    //metodoSemParametroSemTipo(varReal); //Uso de parametros em método sem parâmetros
    //metodoSemParametroComTipo;//Chamada de metodo com tipo

    //metodoComTipo(varRegistro.campoInt, 3, 4);//Metodo com tipo e parametros usado como comando
    var1Int := metodoComTipo(varVetorCt[3 + 5], 3, 4);
    var1Int := metodoComTipo(varRegistro.campoInt, 3, 4);
    //var1Int := metodoComTipo(3 + varVetorCt[3 + 5], 3, 4);
    //var1Int := metodoComTipo(var1Int * var2Int, 3, 4);
    //var1Int := metodoComTipo(var1Int + var2Int, 3, 4);
    //var1Int := metodoComTipo(ctReal, 3, 4);
    //var1Int := metodoComTipo(3, 3, 4); //Parâmetro de referência invalido
    //var1Int := metodoComTipo(varRegistro.campoInt); //Poucos parametros
    //var1Int := metodoComTipo(varRegistro.campoInt,3,4,5);//Muitos parametros
}.
